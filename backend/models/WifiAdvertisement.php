<?php
/**
 * @package    http://www.rulaiyun.cn/
 * @author     wang <wangyaxu7019@dingtalk.com>
 * @copyright  Copyright &copy; rulaiyun.cn,2018 - 2019
 */

namespace backend\models;

use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "rly_wifi".
 *
 * @property int    $wifi_id
 * @property string $adv_id
 * @property string $type
 */
class WifiAdvertisement extends ActiveRecord
{
    const  IMAGE_ADV = 1;    //图片广告
    const  VIDEO_ADV = 2;    //视频广告

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%wifi_advertisement}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [

//            [
//                ['mobile'],
//                'match',
//                'pattern' => '/^1[34578]\d{9}$/',
//            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'wifi_id' => 'wifi_id',
            'adv_id' => '广告id',
            'type' => '广告类型',
        ];
    }

    /**
     * 给广告添加关系
     * @param $model
     * @param $type
     * @throws \yii\db\Exception
     * author: Wang YX
     */
    public function wifiAdv($model,$type){
        if (!empty($model->province)){

            if (!empty($model->area)) {
                $res = Wifi::find()->select('id')->where(['area'=>$model->area])->andWhere(['not', ['industry' => $model->industry]])->asArray()->all();


                if (!empty($res)) {
                    foreach ($res as $key=>$val) {
                        $data[$key]['wifi_id'] = $val['id'];
                        $data[$key]['adv_id'] = $model->id;
                        $data[$key]['type'] = $type;
                    }
                    \Yii::$app->db->createCommand()->batchInsert(WifiAdvertisement::tableName(), ['wifi_id', 'adv_id','type'], $data)->execute();
                }
            } else {

                if (!empty($model->city)){
                    $res = Wifi::find()->select('id')->where(['city'=>$model->city])->andWhere(['not', ['industry' => $model->industry]])->asArray()->all();
                    if (!empty($res)) {
                        foreach ($res as $key=>$val) {
                            $data[$key]['wifi_id'] = $val['id'];
                            $data[$key]['adv_id'] = $model->id;
                            $data[$key]['type'] = $type;
                        }
                        \Yii::$app->db->createCommand()->batchInsert(WifiAdvertisement::tableName(), ['wifi_id', 'adv_id','type'], $data)->execute();
                    }
                } else {

                    $res = Wifi::find()->select('id')->where(['province'=>$model->province])->andWhere(['not', ['industry' => $model->industry]])->asArray()->all();
                    if (!empty($res)) {
                        foreach ($res as $key=>$val) {
                            $data[$key]['wifi_id'] = $val['id'];
                            $data[$key]['adv_id'] = $model->id;
                            $data[$key]['type'] = $type;
                        }
                        \Yii::$app->db->createCommand()->batchInsert(WifiAdvertisement::tableName(), ['wifi_id', 'adv_id','type'], $data)->execute();

                    }
                }

            }
        }
    }

    /**
     * @param bool $insert
     * @return bool
     * @author wang
     */
    public function beforeSave($insert)
    {

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool  $insert
     * @param array $changedAttributes
     * @author wang
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * 删除之后
     */
    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }


}
